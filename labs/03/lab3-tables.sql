-- MySQL Script generated by MySQL Workbench
-- Sat 05 Oct 2019 10:31:48 PM CDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `rentalCard`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rentalCard` ;

CREATE TABLE IF NOT EXISTS `rentalCard` (
  `id` INT NOT NULL,
  `dateSignedUp` DATETIME NOT NULL,
  `credit` DOUBLE NOT NULL DEFAULT 0.0,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'This table tracks cards that can be used to rent movies.';


-- -----------------------------------------------------
-- Table `movieStore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `movieStore` ;

CREATE TABLE IF NOT EXISTS `movieStore` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'This table represents a single movie store at one address.';


-- -----------------------------------------------------
-- Table `genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `genre` ;

CREATE TABLE IF NOT EXISTS `genre` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'This table represents a movie genre.';


-- -----------------------------------------------------
-- Table `customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customer` ;

CREATE TABLE IF NOT EXISTS `customer` (
    `id` INT NOT NULL,
    `rentalCard_id` INT NULL,
    `preferredMovieStore_id` INT NULL,
    `fullname` VARCHAR(45) NOT NULL,
    `address` VARCHAR(45) NOT NULL,
    `preferred_genre_id_1` INT NOT NULL,
    `preferred_genre_id_2` INT NOT NULL,
    PRIMARY KEY (`id` , `rentalCard_id` , `preferred_genre_id_1` , `preferred_genre_id_2`),
    INDEX `fk_customer_rentalCard1_idx` (`rentalCard_id` ASC),
    INDEX `fk_customer_movieStore1_idx` (`preferredMovieStore_id` ASC),
    INDEX `fk_customer_genre1_idx` (`preferred_genre_id_1` ASC),
    INDEX `fk_customer_genre2_idx` (`preferred_genre_id_2` ASC),
    CONSTRAINT `fk_customer_rentalCard1` FOREIGN KEY (`rentalCard_id`)
        REFERENCES `rentalCard` (`id`)
        ON DELETE NO ACTION ON UPDATE NO ACTION,
    CONSTRAINT `fk_customer_movieStore1` FOREIGN KEY (`preferredMovieStore_id`)
        REFERENCES `movieStore` (`id`)
        ON DELETE NO ACTION ON UPDATE NO ACTION,
    CONSTRAINT `fk_customer_genre1` FOREIGN KEY (`preferred_genre_id_1`)
        REFERENCES `genre` (`id`)
        ON DELETE NO ACTION ON UPDATE NO ACTION,
    CONSTRAINT `fk_customer_genre2` FOREIGN KEY (`preferred_genre_id_2`)
        REFERENCES `genre` (`id`)
        ON DELETE NO ACTION ON UPDATE NO ACTION
)  ENGINE=INNODB COMMENT='This table represents a single customer.';


-- -----------------------------------------------------
-- Table `movie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `movie` ;

CREATE TABLE IF NOT EXISTS `movie` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `genre_id` INT NOT NULL,
  `price` DOUBLE NOT NULL,
  PRIMARY KEY (`id`, `genre_id`),
  INDEX `fk_movie_genre1_idx` (`genre_id` ASC) ,
  CONSTRAINT `fk_movie_genre1`
    FOREIGN KEY (`genre_id`)
    REFERENCES `genre` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `movieRentalEvent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `movieRentalEvent` ;

CREATE TABLE IF NOT EXISTS `movieRentalEvent` (
  `id` INT NOT NULL,
  `movieStore_id` INT NOT NULL,
  `movie_id` INT NOT NULL,
  `rentalCard_id` INT NOT NULL,
  `dateRented` DATETIME NOT NULL,
  `dateReturned` DATETIME NULL,
  `deadline` DATETIME NOT NULL,
  `rentalPrice` DOUBLE NOT NULL,
  PRIMARY KEY (`id`, `movieStore_id`, `movie_id`, `rentalCard_id`),
  INDEX `fk_rentalEvent_movie_idx` (`movie_id` ASC) ,
  INDEX `fk_rentalEvent_rentalCard1_idx` (`rentalCard_id` ASC) ,
  INDEX `fk_rentalEvent_movieStore1_idx` (`movieStore_id` ASC) ,
  CONSTRAINT `fk_rentalEvent_movie`
    FOREIGN KEY (`movie_id`)
    REFERENCES `movie` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rentalEvent_rentalCard1`
    FOREIGN KEY (`rentalCard_id`)
    REFERENCES `rentalCard` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rentalEvent_movieStore1`
    FOREIGN KEY (`movieStore_id`)
    REFERENCES `movieStore` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table represents a single rental of a single movie occurring under a single card.';


-- -----------------------------------------------------
-- Table `product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `product` ;

CREATE TABLE IF NOT EXISTS `product` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `price` DOUBLE NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'This table represents a single product with a name and a price.';


-- -----------------------------------------------------
-- Table `productPurchaseEvent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `productPurchaseEvent` ;

CREATE TABLE IF NOT EXISTS `productPurchaseEvent` (
  `id` INT NOT NULL,
  `movieStore_id` INT NOT NULL,
  `rentalCard_id` INT NOT NULL,
  `product_id` INT NOT NULL,
  `datePurchased` DATETIME NOT NULL,
  `itemsPurchased` INT NOT NULL,
  `totalCost` FLOAT NOT NULL,
  PRIMARY KEY (`id`, `movieStore_id`, `rentalCard_id`, `product_id`),
  INDEX `fk_productPurchaseEvent_movieStore1_idx` (`movieStore_id` ASC) ,
  INDEX `fk_productPurchaseEvent_rentalCard1_idx` (`rentalCard_id` ASC) ,
  INDEX `fk_productPurchaseEvent_product1_idx` (`product_id` ASC) ,
  CONSTRAINT `fk_productPurchaseEvent_movieStore1`
    FOREIGN KEY (`movieStore_id`)
    REFERENCES `movieStore` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_productPurchaseEvent_rentalCard1`
    FOREIGN KEY (`rentalCard_id`)
    REFERENCES `rentalCard` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_productPurchaseEvent_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table represents the purchase of one or more products of the same type by one cardholder at one store.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `rentalCard`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `rentalCard` (`id`, `dateSignedUp`, `credit`) VALUES (1, '08-01-2019', 15);
INSERT INTO `rentalCard` (`id`, `dateSignedUp`, `credit`) VALUES (2, '05-23-2003', 50);
INSERT INTO `rentalCard` (`id`, `dateSignedUp`, `credit`) VALUES (3, '03-05-1990', 156);
INSERT INTO `rentalCard` (`id`, `dateSignedUp`, `credit`) VALUES (4, '01-05-2012', 30);
INSERT INTO `rentalCard` (`id`, `dateSignedUp`, `credit`) VALUES (5, '11-17-2007', 58);

COMMIT;


-- -----------------------------------------------------
-- Data for table `movieStore`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `movieStore` (`id`, `name`, `address`) VALUES (1, 'Blockbuster Video', '123 Example Street');
INSERT INTO `movieStore` (`id`, `name`, `address`) VALUES (2, 'Cool Videos Deluxe', '3455 Awesome Ct');
INSERT INTO `movieStore` (`id`, `name`, `address`) VALUES (3, 'Target', '567 Target Ave');
INSERT INTO `movieStore` (`id`, `name`, `address`) VALUES (4, 'One Stop Movie Shop', '111 Movie Ave');
INSERT INTO `movieStore` (`id`, `name`, `address`) VALUES (5, 'Indie Movies', '0 Null Ave');

COMMIT;


-- -----------------------------------------------------
-- Data for table `genre`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `genre` (`id`, `name`) VALUES (1, 'Action');
INSERT INTO `genre` (`id`, `name`) VALUES (2, 'Adventure');
INSERT INTO `genre` (`id`, `name`) VALUES (3, 'Horror');
INSERT INTO `genre` (`id`, `name`) VALUES (4, 'Pirate');
INSERT INTO `genre` (`id`, `name`) VALUES (5, 'Thriller');
INSERT INTO `genre` (`id`, `name`) VALUES (6, 'Superhero');

COMMIT;


-- -----------------------------------------------------
-- Data for table `customer`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `customer` (`id`, `rentalCard_id`, `preferredMovieStore_id`, `fullname`, `address`, `preferred_genre_id_1`, `preferred_genre_id_2`) VALUES (1, 1, 1, 'Henry Post', '1234 MyHouse Ave', 6, 1);
INSERT INTO `customer` (`id`, `rentalCard_id`, `preferredMovieStore_id`, `fullname`, `address`, `preferred_genre_id_1`, `preferred_genre_id_2`) VALUES (2, 2, 1, 'Luke Papademas', '77 Java Way', 1, 5);
INSERT INTO `customer` (`id`, `rentalCard_id`, `preferredMovieStore_id`, `fullname`, `address`, `preferred_genre_id_1`, `preferred_genre_id_2`) VALUES (3, 3, 3, 'Jack Black', '45 Pirate Ave', 4, 1);
INSERT INTO `customer` (`id`, `rentalCard_id`, `preferredMovieStore_id`, `fullname`, `address`, `preferred_genre_id_1`, `preferred_genre_id_2`) VALUES (4, 4, 2, 'Wonder Woman', '22 Cosmic Ct', 6, 5);
INSERT INTO `customer` (`id`, `rentalCard_id`, `preferredMovieStore_id`, `fullname`, `address`, `preferred_genre_id_1`, `preferred_genre_id_2`) VALUES (5, 5, 5, 'Spiderman', 'Spider Lair, NY', 3, 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `movie`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `movie` (`id`, `name`, `genre_id`, `price`) VALUES (1, 'Pirates of the Carribean', 1, 7);
INSERT INTO `movie` (`id`, `name`, `genre_id`, `price`) VALUES (2, 'Ad Astra', 2, 15);
INSERT INTO `movie` (`id`, `name`, `genre_id`, `price`) VALUES (3, 'Joker', 5, 20);
INSERT INTO `movie` (`id`, `name`, `genre_id`, `price`) VALUES (4, 'Wonder Woman', 6, 10);
INSERT INTO `movie` (`id`, `name`, `genre_id`, `price`) VALUES (5, 'Wonder Woman 2', 6, 20);
INSERT INTO `movie` (`id`, `name`, `genre_id`, `price`) VALUES (6, 'Rambo', 1, 7);

COMMIT;


-- -----------------------------------------------------
-- Data for table `movieRentalEvent`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `movieRentalEvent` (`id`, `movieStore_id`, `movie_id`, `rentalCard_id`, `dateRented`, `dateReturned`, `deadline`, `rentalPrice`) VALUES (1, 1, 3, 1, '10-05-2019', NULL, '10-20-2019', 20);
INSERT INTO `movieRentalEvent` (`id`, `movieStore_id`, `movie_id`, `rentalCard_id`, `dateRented`, `dateReturned`, `deadline`, `rentalPrice`) VALUES (2, 1, 5, 2, '10-01-2019', NULL, '10-19-2019', 20);
INSERT INTO `movieRentalEvent` (`id`, `movieStore_id`, `movie_id`, `rentalCard_id`, `dateRented`, `dateReturned`, `deadline`, `rentalPrice`) VALUES (3, 2, 1, 3, '09-02-2018', NULL, '09-10-2018', 15);
INSERT INTO `movieRentalEvent` (`id`, `movieStore_id`, `movie_id`, `rentalCard_id`, `dateRented`, `dateReturned`, `deadline`, `rentalPrice`) VALUES (4, 1, 1, 3, '09-02-2019', NULL, '09-10-2019', 15);
INSERT INTO `movieRentalEvent` (`id`, `movieStore_id`, `movie_id`, `rentalCard_id`, `dateRented`, `dateReturned`, `deadline`, `rentalPrice`) VALUES (5, 4, 6, 2, '07-10-2019', NULL, '07-17-2019', 7);

COMMIT;


-- -----------------------------------------------------
-- Data for table `product`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `product` (`id`, `name`, `price`) VALUES (1, 'Small Popcorn', 3);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (2, 'Medium Popcorn', 4);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (3, 'Large Popcorn', 5);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (4, 'Small Drink', 2);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (5, 'Medium Drink', 3);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (6, 'Large Drink', 4);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (7, 'Water Bottle', 3);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (8, 'M&Ms', 4);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (9, 'Milk Duds', 4);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (10, 'Beer', 5);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (11, 'Wine', 7);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (12, 'Hotdog', 5);
INSERT INTO `product` (`id`, `name`, `price`) VALUES (13, 'Burger', 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `productPurchaseEvent`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `productPurchaseEvent` (`id`, `movieStore_id`, `rentalCard_id`, `product_id`, `datePurchased`, `itemsPurchased`, `totalCost`) VALUES (1, 1, 1, 2, '10-05-2019', 1, 3);
INSERT INTO `productPurchaseEvent` (`id`, `movieStore_id`, `rentalCard_id`, `product_id`, `datePurchased`, `itemsPurchased`, `totalCost`) VALUES (2, 1, 1, 4, '10-05-2019', 1, 2);
INSERT INTO `productPurchaseEvent` (`id`, `movieStore_id`, `rentalCard_id`, `product_id`, `datePurchased`, `itemsPurchased`, `totalCost`) VALUES (3, 1, 1, 4, '10-05-2019', 1, 5);

INSERT INTO `productPurchaseEvent` (`id`, `movieStore_id`, `rentalCard_id`, `product_id`, `datePurchased`, `itemsPurchased`, `totalCost`) VALUES (4, 2, 1, 4, '09-02-2018', 1, 2);
INSERT INTO `productPurchaseEvent` (`id`, `movieStore_id`, `rentalCard_id`, `product_id`, `datePurchased`, `itemsPurchased`, `totalCost`) VALUES (5, 2, 1, 4, '09-02-2018', 1, 2);

COMMIT;
